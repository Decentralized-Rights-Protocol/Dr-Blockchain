name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for private keys
        run: |
          echo "üîç Checking for private key files..."
          if find . -name "*.priv" -o -name "*.pem" -o -name "*.key" -o -name "*.keystore" | grep -v node_modules | grep -v .venv; then
            echo "‚ùå CRITICAL: Private key files found in repository!"
            echo "Please remove all private key files and follow KEY_ROTATION.md"
            exit 1
          else
            echo "‚úÖ No private key files found"
          fi

  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
      
      - name: Run flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run black check
        run: |
          black --check --diff .
      
      - name: Run isort check
        run: |
          isort --check-only --diff .
      
      - name: Run mypy
        run: |
          mypy . --ignore-missing-imports || true

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run Python tests
        run: |
          # Run AI verification tests
          if [ -d "tests_ai" ]; then
            python -m pytest tests_ai/ -v --cov=ai_verification --cov-report=xml
          fi
          
          # Run security tests
          if [ -d "security" ]; then
            python -m pytest security/ -v --cov=security --cov-report=xml --cov-append
          fi
          
          # Run smart contract tests
          if [ -d "smart_contracts" ]; then
            python -m pytest smart_contracts/ -v --cov=smart_contracts --cov-report=xml --cov-append
          fi
          
          # Run token tests
          if [ -d "tokens" ]; then
            python -m pytest tokens/ -v --cov=tokens --cov-report=xml --cov-append
          fi
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  build-and-test:
    name: Build & Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          # Install Python dependencies
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run integration tests
        run: |
          # Run demo scripts to verify integration
          if [ -f "examples/ai_verification_demo.py" ]; then
            python examples/ai_verification_demo.py --demo || true
          fi
          
          if [ -f "examples/security_demos/advanced_security_demo.py" ]; then
            python examples/security_demos/advanced_security_demo.py --demo || true
          fi
      
      - name: Create build artifacts
        run: |
          mkdir -p build-artifacts
          
          # Copy Python packages
          if [ -d "dist" ]; then
            cp -r dist build-artifacts/python
          fi
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build-artifacts/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
