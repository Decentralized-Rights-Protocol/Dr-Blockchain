# DRP Ghana Pilot - Kubernetes Deployment Configuration
# Complete deployment setup for the Ghana testnet pilot

apiVersion: v1
kind: Namespace
metadata:
  name: drp-ghana
  labels:
    name: drp-ghana
    environment: testnet
    region: ghana

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: drp-env-config
  namespace: drp-ghana
data:
  # Network Configuration
  NETWORK_ID: "drp-ghana-testnet"
  CHAIN_ID: "1337"
  BLOCK_TIME: "2"
  
  # AI Configuration
  AI_ELDER_COUNT: "21"
  QUORUM_THRESHOLD: "14"
  BIAS_DETECTION_ENABLED: "true"
  
  # Tokenomics
  RIGHTS_SUPPLY: "1000000000"
  DERI_SUPPLY: "10000000000"
  STAKING_REWARDS: "0.08"
  
  # Ghana-specific
  REGION: "ghana"
  TIMEZONE: "GMT"
  PRIMARY_CITIES: "Accra,Kumasi,Tamale,Cape Coast"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: drp-secrets
  namespace: drp-ghana
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  POSTGRES_PASSWORD: cGFzc3dvcmQxMjM=  # password123
  REDIS_PASSWORD: cmVkaXNwYXNzMTIz=    # redispass123
  JWT_SECRET: and0c2VjcmV0MTIzNDU2Nzg5MA==  # jwtsecret1234567890
  ENCRYPTION_KEY: ZW5jcnlwdGlvbmtleTEyMzQ1Njc4OTA=  # encryptionkey1234567890

---
# Persistent Volume for blockchain data
apiVersion: v1
kind: PersistentVolume
metadata:
  name: drp-blockchain-pv
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: gp2
  awsElasticBlockStore:
    volumeID: vol-12345678
    fsType: ext4

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: drp-blockchain-pvc
  namespace: drp-ghana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: gp2

---
# PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: drp-ghana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "drp_ghana"
        - name: POSTGRES_USER
          value: "drp_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: drp-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: drp-ghana
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: drp-ghana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: drp-secrets
              key: REDIS_PASSWORD
        command: ["redis-server", "--requirepass", "$(REDIS_PASSWORD)"]
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: drp-ghana
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# DRP Blockchain Node
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drp-blockchain-node
  namespace: drp-ghana
spec:
  replicas: 3
  selector:
    matchLabels:
      app: drp-blockchain-node
  template:
    metadata:
      labels:
        app: drp-blockchain-node
    spec:
      containers:
      - name: drp-node
        image: drp/blockchain-node:latest
        ports:
        - containerPort: 8080
        - containerPort: 8081
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NETWORK_ID
          valueFrom:
            configMapKeyRef:
              name: drp-env-config
              key: NETWORK_ID
        - name: CHAIN_ID
          valueFrom:
            configMapKeyRef:
              name: drp-env-config
              key: CHAIN_ID
        - name: POSTGRES_URL
          value: "postgresql://drp_user:$(POSTGRES_PASSWORD)@postgres-service:5432/drp_ghana"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        envFrom:
        - secretRef:
            name: drp-secrets
        volumeMounts:
        - name: blockchain-data
          mountPath: /app/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: blockchain-data
        persistentVolumeClaim:
          claimName: drp-blockchain-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: drp-blockchain-service
  namespace: drp-ghana
spec:
  selector:
    app: drp-blockchain-node
  ports:
  - name: rpc
    port: 8080
    targetPort: 8080
  - name: p2p
    port: 8081
    targetPort: 8081
  type: LoadBalancer

---
# AI Elder Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-elder-service
  namespace: drp-ghana
spec:
  replicas: 5
  selector:
    matchLabels:
      app: ai-elder-service
  template:
    metadata:
      labels:
        app: ai-elder-service
    spec:
      containers:
      - name: ai-elder
        image: drp/ai-elder:latest
        ports:
        - containerPort: 8082
        env:
        - name: ELDER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: AI_ELDER_COUNT
          valueFrom:
            configMapKeyRef:
              name: drp-env-config
              key: AI_ELDER_COUNT
        - name: QUORUM_THRESHOLD
          valueFrom:
            configMapKeyRef:
              name: drp-env-config
              key: QUORUM_THRESHOLD
        - name: BIAS_DETECTION_ENABLED
          valueFrom:
            configMapKeyRef:
              name: drp-env-config
              key: BIAS_DETECTION_ENABLED
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            nvidia.com/gpu: 1
          limits:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 60
          periodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: ai-elder-service
  namespace: drp-ghana
spec:
  selector:
    app: ai-elder-service
  ports:
  - port: 8082
    targetPort: 8082
  type: ClusterIP

---
# DRP API Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drp-api-gateway
  namespace: drp-ghana
spec:
  replicas: 2
  selector:
    matchLabels:
      app: drp-api-gateway
  template:
    metadata:
      labels:
        app: drp-api-gateway
    spec:
      containers:
      - name: api-gateway
        image: drp/api-gateway:latest
        ports:
        - containerPort: 8083
        env:
        - name: BLOCKCHAIN_SERVICE_URL
          value: "http://drp-blockchain-service:8080"
        - name: AI_ELDER_SERVICE_URL
          value: "http://ai-elder-service:8082"
        - name: POSTGRES_URL
          value: "postgresql://drp_user:$(POSTGRES_PASSWORD)@postgres-service:5432/drp_ghana"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        envFrom:
        - secretRef:
            name: drp-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: drp-api-gateway
  namespace: drp-ghana
spec:
  selector:
    app: drp-api-gateway
  ports:
  - port: 80
    targetPort: 8083
  type: LoadBalancer

---
# DRP Explorer Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drp-explorer
  namespace: drp-ghana
spec:
  replicas: 2
  selector:
    matchLabels:
      app: drp-explorer
  template:
    metadata:
      labels:
        app: drp-explorer
    spec:
      containers:
      - name: explorer
        image: drp/explorer:latest
        ports:
        - containerPort: 3000
        env:
        - name: API_URL
          value: "http://drp-api-gateway"
        - name: NETWORK_ID
          valueFrom:
            configMapKeyRef:
              name: drp-env-config
              key: NETWORK_ID
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"

---
apiVersion: v1
kind: Service
metadata:
  name: drp-explorer
  namespace: drp-ghana
spec:
  selector:
    app: drp-explorer
  ports:
  - port: 80
    targetPort: 3000
  type: LoadBalancer

---
# Monitoring - Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: drp-ghana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: drp-ghana
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP

---
# Monitoring - Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: drp-ghana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: drp-ghana
spec:
  selector:
    app: grafana
  ports:
  - port: 80
    targetPort: 3000
  type: LoadBalancer

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: drp-ghana-ingress
  namespace: drp-ghana
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api.ghana-pilot.drp-protocol.org
    - explorer.ghana-pilot.drp-protocol.org
    - monitor.ghana-pilot.drp-protocol.org
    secretName: drp-ghana-tls
  rules:
  - host: api.ghana-pilot.drp-protocol.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: drp-api-gateway
            port:
              number: 80
  - host: explorer.ghana-pilot.drp-protocol.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: drp-explorer
            port:
              number: 80
  - host: monitor.ghana-pilot.drp-protocol.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 80

---
# Horizontal Pod Autoscaler for API Gateway
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: drp-api-gateway-hpa
  namespace: drp-ghana
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: drp-api-gateway
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: drp-network-policy
  namespace: drp-ghana
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: drp-ghana
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: drp-ghana
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
