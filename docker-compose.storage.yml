version: '3.8'

services:
  # Neo4j Graph Database for Indexer Layer
  neo4j:
    image: neo4j:5.15-community
    container_name: drp-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/drp_password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - drp-storage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "drp_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # IPFS Node for Proof Storage
  ipfs:
    image: ipfs/kubo:latest
    container_name: drp-ipfs
    ports:
      - "4001:4001"   # IPFS swarm
      - "5001:5001"   # IPFS API
      - "8080:8080"   # IPFS Gateway
    environment:
      - IPFS_PROFILE=server
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - drp-storage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: drp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - drp-storage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: drp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - drp-storage-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: drp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=drp_admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./scripts/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - drp-storage-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  ipfs_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  drp-storage-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
